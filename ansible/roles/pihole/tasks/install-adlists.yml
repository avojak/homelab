---
# Query the database for the addresses and enabled status of adlists
- name: Get current adlists
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 /etc/pihole/gravity.db 'select address,enabled from adlist;'
  register: current_adlists
  changed_when: false

# Sort the adlists so that they can be accurately compared with the target adlists
- name: Sort current adlists
  set_fact:
    current_adlists_sorted: "{{ current_adlists.stdout_lines | sort }}"

# Ensure that the target_adlists variable is defined even if there are none provided by the user
- name: Create list of target adlists
  set_fact:
    target_adlists: []

# Convert the target adlists variable into a list that will match the format of the current adlists
- name: Populate list of target adlists
  set_fact:
    target_adlists: "{{ target_adlists | default([]) | union([item.address ~ '|' ~ (item.enabled | default('yes') | bool | int)]) }}"
  loop: "{{ pihole_adlists  }}"

# Apply the same sorting to the target adlists as we did for the current adlists
- name: Sort target adlists
  set_fact:
    target_adlists_sorted: "{{ target_adlists | sort }}"

# The target adlists are considered changed if they don't match what was found in the database
- name: Determine if target adlists are changed
  set_fact:
    adlists_changed: "{{ current_adlists_sorted != target_adlists_sorted }}"

# Remove existing adlists from the database so we can easily insert the target adlists
- name: Remove existing adlists in the gravity database when adlists have changed
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 /etc/pihole/gravity.db 'delete from adlist;'
  when: adlists_changed
  notify: "Update gravity"

# Reset the index sequence back to 0 on the adlist table after clearing all rows
- name: Reset adlist table sequence
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 /etc/pihole/gravity.db "UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='adlist';"
  when: adlists_changed
  notify: "Update gravity"

# Insert target adlists
- name: Insert adlists to the gravity database
  community.docker.docker_container_exec:
    container: pihole
    command: sqlite3 /etc/pihole/gravity.db 'insert into adlist(address,enabled,comment) values ("{{ item.address }}","{{ item.enabled | default('yes') | bool | int }}","{{ item.comment | default('') }}");'
  with_items: "{{ pihole_adlists }}"
  when: adlists_changed
  notify: "Update gravity"