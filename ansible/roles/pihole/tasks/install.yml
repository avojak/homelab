---
- name: Create install directory
  file:
    path: "{{ pihole_install_dir }}"
    state: directory
    mode: 0755

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  with_items:
    - "{{ pihole_etc_pihole_dir }}"
    - "{{ pihole_etc_dnsmasqd_dir }}"

# TODO: This seems to crash the application when the container restarts
#       Contrary to what it seems, you can't just update this file...
- name: Copy custom DNS list
  template:
    src: custom.list.j2
    dest: "{{ pihole_etc_pihole_dir }}/custom.list"
    mode: 0644
  notify: "Update gravity"

- name: Ensure container is running
  docker_container:
    name: pihole
    image: pihole/pihole:latest
    state: started
    restart: no
    restart_policy: unless-stopped
    pull: yes
    ports:
      - '{{ ansible_host }}:53:53/udp'
      - '{{ ansible_host }}:53:53/tcp'
      - '80:80/tcp'
      - '443:443/tcp'
    volumes:
      - "{{ pihole_etc_pihole_dir }}:/etc/pihole/"
      - "{{ pihole_etc_dnsmasqd_dir }}:/etc/dnsmasq.d/"
    hostname: "{{ inventory_hostname }}"
    env:
      TZ: "{{ pihole_timezone }}"
      WEBPASSWORD: "{{ pihole_web_password }}"
      PIHOLE_DNS_: "{{ pihole_upstream_dns | join(';') }}"
      TEMPERATUREUNIT: "{{ pihole_temp_unit }}"
      DNSMASQ_LISTENING: "{{ pihole_dnsmasq }}"
      FTLCONF_LOCAL_IPV4: "127.0.0.1"
      DNS_FQDN_REQUIRED: "true"
      DNSSEC: "false"
      VIRTUAL_HOST: "{{ inventory_hostname }}"

# - name: Restart service when custom DNS list has changed
#   docker_container:
#     name: pihole
#     restart: yes
#   when: pihole_dns_list.changed

- name: Wait for container to be ready
  uri:
    url: http://localhost
  register: container_result
  until: container_result.status == 200
  retries: 30
  delay: 5

# Install adlists and domainlist
- include_tasks: install-adlists.yml
- include_tasks: install-domainlist.yml

- name: Cleanup stale Docker images
  docker_prune:
    images: yes
    images_filters:
      dangling: false

- name: Ensure ports open on the firewall
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: 53, proto: "udp" } # DNS
    - { port: 53, proto: "tcp" } # DNS
    - { port: 80, proto: "tcp" } # HTTP dashboard
    - { port: 443, proto: "tcp" } # HTTPS dashboard
