---
- name: Create install directory
  ansible.builtin.file:
    path: "{{ pihole_install_dir }}"
    state: directory
    mode: '755'

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '777'
  with_items:
    - "{{ pihole_etc_pihole_dir }}"
    - "{{ pihole_etc_dnsmasqd_dir }}"

# TODO: This seems to crash the application when the container restarts
#       Contrary to what it seems, you can't just update this file...
- name: Copy custom DNS list
  ansible.builtin.template:
    src: custom.list.j2
    dest: "{{ pihole_etc_pihole_dir }}/custom.list"
    mode: '644'
  notify: Update gravity

- name: Copy FTL config
  ansible.builtin.template:
    src: pihole-FTL.conf.j2
    dest: "{{ pihole_etc_pihole_dir }}/pihole-FTL.conf"
    mode: '644'
  notify: Restart container

- name: Copy docker-compose template
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ pihole_install_dir }}/docker-compose.yml"
    mode: '0644'

- name: Ensure stack is running
  community.docker.docker_compose:
    project_name: Pi-hole
    project_src: "{{ pihole_install_dir }}"
    state: present
    pull: false

# - name: Restart service when config has changed
#   community.docker.docker_compose:
#     project_src: "{{ pihole_install_dir }}"
#     build: false
#     restarted: true
#   when: pihole_setup_vars.changed

- name: Wait for container to be ready
  ansible.builtin.uri:
    url: http://localhost/admin/api.php
  register: pihole_container_result
  until: pihole_container_result.status == 200
  retries: 30
  delay: 5

- name: Install ad lists
  ansible.builtin.include_tasks: install-adlists.yml

- name: Install domain lists
  ansible.builtin.include_tasks: install-domainlist.yml

- name: Cleanup stale Docker images
  community.docker.docker_prune:
    images: true
    images_filters:
      dangling: false

- name: Ensure ports open on the firewall
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: 53, proto: "udp" } # DNS
    - { port: 53, proto: "tcp" } # DNS
    - { port: 80, proto: "tcp" } # HTTP dashboard
    - { port: 443, proto: "tcp" } # HTTPS dashboard
