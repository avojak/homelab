---
- name: Create services directory
  file:
    path: /opt/traefik/services
    state: directory
    mode: '0755'

- name: Setup the services file
  template:
    src: config.yml.j2
    dest: /opt/traefik/services/config.yml
    mode: '0644'
# TODO: restart container if this changed

- name: Ensure container is running
  docker_container:
    name: traefik
    image: traefik:latest
    state: started
    restart: no
    restart_policy: unless-stopped
    pull: yes
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/services"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email={{ traefik_email_address }}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--log.level={{ traefik_log_level }}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.dashboard.rule: "Host(`{{ traefik_dashboard_domain }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      traefik.http.routers.dashboard.service: "api@internal"
      traefik.http.routers.dashboard.entrypoints: "websecure"
      traefik.http.routers.dashboard.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: "{{ traefik_username }}:{{ traefik_password | string | password_hash('bcrypt') }}"
    ports:
      - '80:80/tcp'
      - '443:443/tcp'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/traefik/letsencrypt:/letsencrypt
      - /opt/traefik/services:/etc/traefik/services

- name: Cleanup stale Docker images
  docker_prune:
    images: yes
    images_filters:
      dangling: false

- name: Ensure ports open on the firewall
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: 443, proto: "tcp" } # HTTPS dashboard
